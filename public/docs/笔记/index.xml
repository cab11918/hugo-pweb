<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>余名皓</title>
    <link>https://cab11918.github.io/hugo-pweb/docs/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content on 余名皓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <atom:link href="https://cab11918.github.io/hugo-pweb/docs/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cookie缓存实现定时弹窗</title>
      <link>https://cab11918.github.io/hugo-pweb/docs/%E7%AC%94%E8%AE%B0/%E9%80%9A%E8%BF%87cookie%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%BC%B9%E7%AA%97%E9%80%9A%E7%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://cab11918.github.io/hugo-pweb/docs/%E7%AC%94%E8%AE%B0/%E9%80%9A%E8%BF%87cookie%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%BC%B9%E7%AA%97%E9%80%9A%E7%9F%A5/</guid>
      <description>通过Cookie缓存实现定时弹窗通知 # JS-Cookies MomentJS
引言 # ​	前端SPA很多时候会需要集体性的且可控的通知用户一些关键信息。在此业务场景下，体检机构在未签约时将不会显示体检人的相关信息。这就需要对每个在平台内的每个账号弹出提示文字，有时，这个文字的出现还得有时间限制，比如七天以后这个通知就不再显示了。有没有一种方法能够不依托于后端字段信息的存储去实现这一需求呢？
实现思路 # ​	首先，需要确定的前提是通知弹出是依据机构的，每家机构下的账户都有自己唯一的ID。即使在同一台电脑上登录了不一样的用户，他们的计时也是分开的。当用户是第一次在一台电脑上登录的时候，我们可以给每个account设置一个Cookie.set(&#39;accountID-date&#39;,时间(此时间可以利用Moment-JS等依赖生成)) 这样子当我们在需要展示信息等时候我们只需要用Cookie里存储的时间与当前时间做一个对比就可以了，在实现功能的前提下也降低了后端增加字段的时间成本。
//检查对应ID的日期是否存在，即是否第一次登陆，设置七天期限用于脱敏显示。 if (Cookie.get(accountUuid + &amp;#39;-date&amp;#39;) === undefined) { Cookie.set(accountUuid + &amp;#39;-date&amp;#39;, today); console.log(Cookie.get(accountUuid + &amp;#39;-date&amp;#39;), &amp;#39;id-date&amp;#39;); } //检查对应ID的日期是否存在，即是否第一次登陆，设置七天期限用于脱敏显示。 const today = moment().format(&amp;#39;YYYY-MM-DD&amp;#39;); const accountUuid = Cookie.get(&amp;#39;cloud-accountUuid&amp;#39;); if (Cookie.get(accountUuid + &amp;#39;-date&amp;#39;) !== undefined) { let dayPassed = moment(today).diff(moment(Cookie.get(accountUuid + &amp;#39;-date&amp;#39;)), &amp;#39;days&amp;#39;); console.log(dayPassed, &amp;#39;daypassed&amp;#39;); if (dayPassed &amp;gt; 6) { setCanceled(false); } } }, [token]); 技术难点/问题 # ​	诸如此类的方法其实很难应用到高优先级、高重要性的通知上。Cookie的保存不能在浏览器的无痕模式下发挥作用且容易被人恶意修改。除此之外，这种实现方法一旦部署就会很难进行维护或者修改。当需求或者业务逻辑发生改变时，需要部署新版本给Cookies加上废弃时间戳。如果大量使用这种方法，必然会污染用户的Cookie环境，从而可能进一步引发一些由于Cookie命名所带来的bug</description>
    </item>
    <item>
      <title>DOM实现报告自动分页</title>
      <link>https://cab11918.github.io/hugo-pweb/docs/%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%88%86%E9%A1%B5%E6%95%88%E6%9E%9C%E7%9A%84%E6%80%9D%E8%B7%AF-%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%E5%B9%B6%E4%BB%8E%E7%A7%BB%E9%99%A4dom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://cab11918.github.io/hugo-pweb/docs/%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%88%86%E9%A1%B5%E6%95%88%E6%9E%9C%E7%9A%84%E6%80%9D%E8%B7%AF-%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%E5%B9%B6%E4%BB%8E%E7%A7%BB%E9%99%A4dom/</guid>
      <description>实现自动分页效果的思路-插入元素并从移除DOM # DOM JS 自动化
引言 # ​	很多时候前端开发者可以使用目前主流框架如React等实现对于比较复杂的报告（如体检报告、医疗影像报告&amp;hellip;）的开发工作。但是如果用户的信息相对冗杂且信息的数量不确定时，每个页面所能展示的内容数量就难以被确定。举个例子，一个肺部疾病的病人可能在CT影像中可能只会有2个可疑病灶，也可能有20多个&amp;hellip; 报告中的样式是无法确定的，很多时候可能会因为业务原因作修改。这些修改包括：文字、图片、间距等等。
实现思路 # ​	既然文字、图片等信息的来源通常是后端接口返回的数据，通过文字或者图片数量去计算然后通过JS方法去实现分组显然不会很准确。（光是中英文和样式就会导致每行自述不固定，图片的阴影、自适应缩放也是如此）如果能获取这些信息在文本流中的准确宽高度问题也就解决了。
document.createElement,document.body.appendChild,document.body.removeChild这三个方法刚好能帮我们解决这个问题。只需要在DOM中新建这个元素，获取高度，最后移除这个元素就能获得所需的信息并且在渲染完成之前不添加多余元素到页面。
//预检文本在当前格式下将占用的高度，对于模拟新建的元素 a ，可以提前对其设定样式以保证测量所需性质（高度）的真实性 function preFlight(text: string) { var a = document.createElement(&amp;#34;div&amp;#34;) a.innerText = text a.style.width = &amp;#39;793px&amp;#39; document.body.appendChild(a); let temp = a.offsetHeight document.body.removeChild(a); return temp } 技术难点/问题 # 考虑到这种实现方法确实会基于现有数据在当前DOM外构建子树，当信息量大的时候这种分页方式也势必会影响性能。
参考 # 你真的了解回流和重绘吗
document.body.appendChild()会重新渲染整棵DOM树吗</description>
    </item>
    <item>
      <title>业务逻辑拆分列表实现</title>
      <link>https://cab11918.github.io/hugo-pweb/docs/%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%8B%86%E5%88%86%E5%88%97%E8%A1%A8%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95%E9%9A%8F%E7%AC%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://cab11918.github.io/hugo-pweb/docs/%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%8B%86%E5%88%86%E5%88%97%E8%A1%A8%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95%E9%9A%8F%E7%AC%94/</guid>
      <description>关于业务逻辑拆分列表实现方法随笔 # Redux JSNote
引言 # ​	列表展示元素是前端开发里很常用到的一个业务场景。随着一个SPA的业务发展和功能需求增多，将一个已有的列表拆成两半有时候可能会是一件非常麻烦的事情。
​	如上图，此时的需求时间非常紧。我们在第一次去想这个问题的时候多半是把redux里的全局列表通过业务逻辑拆分成两个列表然后通过该组件的本地状态呈现出来实现拆分。问题在于，对于功能非常多的大型应用场景，光是对单个元素的增删改查功能就有大约五种以上。还不包括与其他元素的联动功能，这样子我们就需要给每个已有的功能针对现在的本地列表增加新的代码。
实现思路 # ​	既然我们的目标是不破坏原有Redux状态里的列表，也不新增更多的全局或该组件的状态从而使现有功能在不做修改的前提下继续复用，我们可以把原有的列表通过条件多渲染一遍。
即：
arr1 -&amp;gt; [1,2,3,4,5] //通过判断条件 i &amp;lt; 3 得到两次渲染的结果 arr1(render(i&amp;lt;3)) -&amp;gt; [1,2] arr1(render(!i&amp;lt;3)) -&amp;gt; [3,4,5] 技术难点/问题 # ​	其实该业务逻辑并不复杂，但是实现的思路很重要。两次filter渲染必然会在性能方面打折扣，也会有很多其他的弊端，但这确实是在时间有限需求紧急的时候相对来说工程量最小的解决方案。没有额外的新状态也会让以后的代码便于维护</description>
    </item>
  </channel>
</rss>
